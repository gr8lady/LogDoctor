import argparse
import os
from logdoctor import stacktrace
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

import logging

# Configurar logger
logging.basicConfig(
    filename='logs/logdoctor.log',
    filemode='a',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)


def leer_log(filepath):
    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
        return f.readlines()

def guardar_csv(resultados, output_file):
    import csv
    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = ['tipo_error', 'descripcion', 'causa_raiz']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for r in resultados:
            writer.writerow(r)

def cli():
    parser = argparse.ArgumentParser(description='LogDoctor - Analiza logs y detecta causas ra√≠z de errores.')
    parser.add_argument('--logfile', required=True, help='Ruta del archivo de log')
    parser.add_argument('--csv', help='Exportar resultado a CSV')

    args = parser.parse_args()

    if not os.path.exists(args.logfile):
        print(f"‚ùå Archivo no encontrado: {args.logfile}")
        return

    print(f"üìñ Analizando: {args.logfile}")
    lineas = leer_log(args.logfile)
    bloques = stacktrace.extraer_stacktrace(lineas)
    
    resultados = []
    for i, bloque in enumerate(bloques, 1):
        print(f"üß™ Stack trace #{i}:")
        causa = stacktrace.analizar_causa_raiz(bloque)
        print(f"   ‚ö†Ô∏è {causa['tipo_error']} ‚Üí {causa['descripcion']}")
        resultados.append(causa)

    if args.csv:
        guardar_csv(resultados, args.csv)
        print(f"üì§ Resultados exportados a: {args.csv}")

if __name__ == '__main__':
    cli()

